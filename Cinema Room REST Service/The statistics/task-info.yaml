type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }

    sourceCompatibility = 11

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", any())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", any())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            reloadSpring();

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 1)
                            .value("column", 1)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(0, 0, 81),
            this::testPurchaseTicket,
            () -> testStats(1, 10, 80),
            this::returnTicket,
            () -> testStats(0, 0, 81),
        };
    }
  learner_created: false
- name: src/cinema/Seat.java
  visible: true
  text: |
    package cinema;

    import com.fasterxml.jackson.annotation.JsonProperty;

    public class Seat {
        private final int row;
        private final int column;
        private final int price;

        public Seat(@JsonProperty("row") int row, @JsonProperty("column") int column) {
            this.row = row;
            this.column = column;
            this.price = row <= 4 ? 10 : 8;
        }

        public int getRow() {
            return row;
        }

        public int getColumn() {
            return column;
        }

        public int getPrice() {
            return price;
        }
    }
  learner_created: true
- name: src/cinema/Ticket.java
  visible: true
  text: |
    package cinema;

    import com.fasterxml.jackson.annotation.JsonProperty;

    public class Ticket {
        @JsonProperty("token")
        private final String token;

        @JsonProperty("ticket")
        private final Seat seat;

        public Ticket(@JsonProperty("token") String token, @JsonProperty("ticket") Seat seat) {
            this.token = token;
            this.seat = seat;
        }

        public String getToken() {
            return token;
        }

        public Seat getSeat() {
            return seat;
        }
    }
  learner_created: true
- name: src/cinema/APIExceptionHandler.java
  visible: true
  text: |
    package cinema;

    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.ControllerAdvice;
    import org.springframework.web.bind.annotation.ExceptionHandler;

    @ControllerAdvice
    public class APIExceptionHandler {

        @ExceptionHandler(value = {APIRequestException.class})
        public ResponseEntity<Object> handleAPIRequestException(APIRequestException e) {
            HttpStatus badRequest = HttpStatus.BAD_REQUEST;
            APIException apiException = new APIException(
                    e.getMessage()
            );

            return new ResponseEntity<>(apiException, badRequest);
        }
    }
  learner_created: true
- name: src/cinema/Cinema.java
  visible: true
  text: |
    package cinema;

    import java.util.ArrayList;
    import java.util.List;

    public class Cinema {
        private final int rows;
        private final int columns;
        private final List<Seat> availableSeats;
        private final List<Ticket> purchasedTickets;

        public Cinema(int rows, int columns) {
            this.rows = rows;
            this.columns = columns;
            this.availableSeats = fillCinema();
            this.purchasedTickets = new ArrayList<>();
        }

        private List<Seat> fillCinema() {
            List<Seat> seats = new ArrayList<>();
            for (int row = 1; row <= rows; row++) {
                for (int col = 1; col <= columns; col++) {
                    seats.add(new Seat(row, col));
                }
            }
            return seats;
        }

        public int getRows() {
            return rows;
        }

        public int getColumns() {
            return columns;
        }

        public List<Seat> getAvailableSeats() {
            return availableSeats;
        }

        public List<Ticket> getPurchasedTickets() {
            return purchasedTickets;
        }

        public void addPurchasedTicket(Ticket ticket) {
            this.purchasedTickets.add(ticket);
            Seat seat = ticket.getSeat();
            this.availableSeats.removeIf(s -> s.getRow() == seat.getRow() && s.getColumn() == seat.getColumn());
        }

        public Seat returnTicket(Ticket ticket) {
            for (Ticket t : getPurchasedTickets()) {
                if (t.getToken().equals(ticket.getToken())) {
                    Seat seat = t.getSeat();
                    this.availableSeats.add(seat);
                    this.purchasedTickets.remove(t);
                    return seat;
                }
            }
            return null;
        }
    }
  learner_created: true
- name: src/cinema/APIException.java
  visible: true
  text: |
    package cinema;

    public class APIException {
        private final String error;

        public APIException(String error) {
            this.error = error;
        }

        public String getError() {
            return error;
        }
    }
  learner_created: true
- name: src/cinema/APIRequestException.java
  visible: true
  text: |
    package cinema;

    public class APIRequestException extends RuntimeException {
        public APIRequestException(String message) {
            super(message);
        }

        public APIRequestException(String message, Throwable cause) {
            super(message, cause);
        }
    }
  learner_created: true
- name: src/cinema/CinemaController.java
  visible: true
  text: |
    package cinema;

    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;

    import java.util.Map;
    import java.util.UUID;

    @RestController
    public class CinemaController {
        private final Cinema cinema = new Cinema(9,9);

        @GetMapping("/seats")
        public Map<String, Object> getSeats() throws Exception {
            return Map.of(
                    "total_rows", cinema.getRows(),
                    "total_columns", cinema.getColumns(),
                    "available_seats", cinema.getAvailableSeats()
            );
        }

        @PostMapping("/purchase")
        public Ticket purchaseTicket(@RequestBody Seat seat) throws Exception {
            if (seat.getRow() <= 0 || seat.getRow() > cinema.getRows() || seat.getColumn() <= 0 || seat.getColumn() > cinema.getColumns()) {
                throw new APIRequestException("The number of a row or a column is out of bounds!");
            }

            for (Ticket t : cinema.getPurchasedTickets()) {
                Seat s = t.getSeat();
                if (s.getRow() == seat.getRow() && s.getColumn() == seat.getColumn()) {
                    throw new APIRequestException("The ticket has been already purchased!");
                }
            }

            Ticket ticket = new Ticket(UUID.randomUUID().toString(), seat);

            cinema.addPurchasedTicket(ticket);

            return ticket;
        }

        @PostMapping("/return")
        public Map<String, Object> returnTicket(@RequestBody Ticket ticket) throws Exception {
            boolean ticketExists = false;
            for (Ticket t : cinema.getPurchasedTickets()) {
                if (t.getToken().equals(ticket.getToken())) {
                    ticketExists = true;
                    break;
                }
            }

            if (!ticketExists) {
                throw new APIRequestException("Wrong token!");
            }

            return Map.of("returned_ticket", cinema.returnTicket(ticket));
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/189/stages/948/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Thu, 29 Jul 2021 13:18:36 UTC
record: -1
